// Code generated by protoc-gen-go.
// source: iotArduino.proto
// DO NOT EDIT!

/*
Package arduino_service is a generated protocol buffer package.

It is generated from these files:
	iotArduino.proto

It has these top-level messages:
	ArduinoRequest
	GetTemperatureResponse
	PowerResponse
*/
package arduino_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArduinoRequest struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *ArduinoRequest) Reset()                    { *m = ArduinoRequest{} }
func (m *ArduinoRequest) String() string            { return proto.CompactTextString(m) }
func (*ArduinoRequest) ProtoMessage()               {}
func (*ArduinoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArduinoRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArduinoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArduinoRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GetTemperatureResponse struct {
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *GetTemperatureResponse) Reset()                    { *m = GetTemperatureResponse{} }
func (m *GetTemperatureResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTemperatureResponse) ProtoMessage()               {}
func (*GetTemperatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTemperatureResponse) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type PowerResponse struct {
	Power bool `protobuf:"varint,1,opt,name=power" json:"power,omitempty"`
}

func (m *PowerResponse) Reset()                    { *m = PowerResponse{} }
func (m *PowerResponse) String() string            { return proto.CompactTextString(m) }
func (*PowerResponse) ProtoMessage()               {}
func (*PowerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PowerResponse) GetPower() bool {
	if m != nil {
		return m.Power
	}
	return false
}

func init() {
	proto.RegisterType((*ArduinoRequest)(nil), "arduino_service.ArduinoRequest")
	proto.RegisterType((*GetTemperatureResponse)(nil), "arduino_service.GetTemperatureResponse")
	proto.RegisterType((*PowerResponse)(nil), "arduino_service.PowerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Arduino service

type ArduinoClient interface {
	GetTemperature(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error)
	IsPower(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*PowerResponse, error)
	PowerOff(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*PowerResponse, error)
	PowerOn(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*PowerResponse, error)
}

type arduinoClient struct {
	cc *grpc.ClientConn
}

func NewArduinoClient(cc *grpc.ClientConn) ArduinoClient {
	return &arduinoClient{cc}
}

func (c *arduinoClient) GetTemperature(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error) {
	out := new(GetTemperatureResponse)
	err := grpc.Invoke(ctx, "/arduino_service.Arduino/GetTemperature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arduinoClient) IsPower(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*PowerResponse, error) {
	out := new(PowerResponse)
	err := grpc.Invoke(ctx, "/arduino_service.Arduino/IsPower", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arduinoClient) PowerOff(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*PowerResponse, error) {
	out := new(PowerResponse)
	err := grpc.Invoke(ctx, "/arduino_service.Arduino/PowerOff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arduinoClient) PowerOn(ctx context.Context, in *ArduinoRequest, opts ...grpc.CallOption) (*PowerResponse, error) {
	out := new(PowerResponse)
	err := grpc.Invoke(ctx, "/arduino_service.Arduino/PowerOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Arduino service

type ArduinoServer interface {
	GetTemperature(context.Context, *ArduinoRequest) (*GetTemperatureResponse, error)
	IsPower(context.Context, *ArduinoRequest) (*PowerResponse, error)
	PowerOff(context.Context, *ArduinoRequest) (*PowerResponse, error)
	PowerOn(context.Context, *ArduinoRequest) (*PowerResponse, error)
}

func RegisterArduinoServer(s *grpc.Server, srv ArduinoServer) {
	s.RegisterService(&_Arduino_serviceDesc, srv)
}

func _Arduino_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArduinoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArduinoServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arduino_service.Arduino/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArduinoServer).GetTemperature(ctx, req.(*ArduinoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arduino_IsPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArduinoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArduinoServer).IsPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arduino_service.Arduino/IsPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArduinoServer).IsPower(ctx, req.(*ArduinoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arduino_PowerOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArduinoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArduinoServer).PowerOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arduino_service.Arduino/PowerOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArduinoServer).PowerOff(ctx, req.(*ArduinoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arduino_PowerOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArduinoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArduinoServer).PowerOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arduino_service.Arduino/PowerOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArduinoServer).PowerOn(ctx, req.(*ArduinoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arduino_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arduino_service.Arduino",
	HandlerType: (*ArduinoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _Arduino_GetTemperature_Handler,
		},
		{
			MethodName: "IsPower",
			Handler:    _Arduino_IsPower_Handler,
		},
		{
			MethodName: "PowerOff",
			Handler:    _Arduino_PowerOff_Handler,
		},
		{
			MethodName: "PowerOn",
			Handler:    _Arduino_PowerOn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iotArduino.proto",
}

func init() { proto.RegisterFile("iotArduino.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcc, 0x2f, 0x71,
	0x2c, 0x4a, 0x29, 0xcd, 0xcc, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0x84,
	0x70, 0xe3, 0x8b, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x95, 0xdc, 0xb8, 0xf8, 0xa0, 0x2a, 0x82,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x58, 0x83, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98,
	0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xa2, 0x1c, 0x09, 0x66,
	0xb0, 0x10, 0x88, 0xa9, 0x64, 0xc5, 0x25, 0xe6, 0x9e, 0x5a, 0x12, 0x92, 0x9a, 0x5b, 0x90, 0x5a,
	0x94, 0x58, 0x52, 0x5a, 0x94, 0x1a, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xa4, 0xc0,
	0xc5, 0x5d, 0x82, 0x10, 0x06, 0x1b, 0xcc, 0x14, 0x84, 0x2c, 0xa4, 0xa4, 0xca, 0xc5, 0x1b, 0x90,
	0x5f, 0x9e, 0x5a, 0x04, 0xd7, 0x22, 0xc2, 0xc5, 0x5a, 0x00, 0x12, 0x00, 0x2b, 0xe6, 0x08, 0x82,
	0x70, 0x8c, 0x4e, 0x31, 0x71, 0xb1, 0x43, 0xdd, 0x2a, 0x14, 0xc5, 0xc5, 0x87, 0x6a, 0x9d, 0x90,
	0xbc, 0x1e, 0x9a, 0xd7, 0xf4, 0x50, 0xfd, 0x25, 0xa5, 0x8e, 0xa1, 0x00, 0x87, 0x83, 0xbd, 0xb8,
	0xd8, 0x3d, 0x8b, 0xc1, 0x0e, 0x22, 0x6c, 0xa8, 0x1c, 0x86, 0x02, 0x54, 0x9f, 0x78, 0x73, 0x71,
	0x80, 0x05, 0xfc, 0xd3, 0xd2, 0x28, 0x37, 0xcc, 0x8b, 0x8b, 0x1d, 0x62, 0x58, 0x1e, 0xc5, 0x66,
	0x39, 0x19, 0x72, 0x89, 0x25, 0xe7, 0xe7, 0xea, 0x25, 0x96, 0xa5, 0xa6, 0x27, 0xe6, 0xeb, 0x65,
	0xe6, 0x97, 0xc0, 0xd4, 0x3b, 0xf1, 0x7b, 0xc2, 0x13, 0x4d, 0x00, 0x28, 0xcd, 0x04, 0x30, 0x2e,
	0x62, 0x62, 0x0e, 0x0a, 0x71, 0x4f, 0x62, 0x03, 0x27, 0x21, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x02, 0xbf, 0x68, 0x11, 0x56, 0x02, 0x00, 0x00,
}
